@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ {
---\nMIIJKQIBAAKCAgEA0eHGTVjy2s+uOfFteMoBT6TXa0Ra20weFoA/dQB2SsCvZ2zA\nOJqDuqbjFPdcRPp0TwR0rmDDHaLzV>   "private_key_a": "-----BEGIN RSA PRIVATE KEY-----\n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\n-----END RSA PRIVATE KEY-----\n",
>   "private_key_b": "-----BEGIN RSA PRIVATE KEY-----\n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\n-----END RSA PRIVATE KEY-----\n"
> }
bash: private_key_a:: command not found
bash: private_key_b:: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ {
>   "data": [
>     {
>       "id": "dcf2bfcb-a1d0-3b58-bbf0-3ec22a510ba8",
>       "type": "public_keys",
>       "attributes": {
>         "key": "-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA0eHGTVjy2s+uOfFteMoB\nT6TXa0Ra20weFoA/dQB2SsCvZ2zAOJqDuqbjFPdcRPp0TwR0rmDDHaLzV/d8EwF2\nXiX9+9lwEGivn4PCz0A49gelNthD2dFR/TxyiVVdRsiaPeGJKVZTkYO3FhCKBpXe\nL2h1t+yhIQGGYZjh/fGgahJf2PKzDapHO4p8MZK8KCUBIN5z20cYblRyt39gdHul\nsqGvERDUwYdgiEAFv5Y9yyVFUeMmeiswImLj8yHnVdwc2+5jEtWEeGzkZ0LNQCby\nnynlGwzkDXcQ98Pm00XDcvPwPk91dBvZvhA/G2n2zXp8WA+MLOkWIi015Lqy4doa\n807DYfJW+600c1P0YaOI/pgGO9dGllpFGcZBxoNN5ZMUUOjTmrXYUNYTGSZh93gd\nlGP3rlhvAlui17CUW2pLpl4CaSUDJWXQZyJH/ILZ+HMVgOMsc7eyZDLWyWWaNlJg\nEKSVNF3A8zx8oCtu+LjNPTqaiRvc3BI/ISRvb6r99v5oozCVQ/QIT24AxMLdmy01\nxOhXuDq48uoUTWssquuOnfFdF1WaK3c+AlaomX39re/rj4pvIB0ZlzuVN+LGG5WK\nYb6jCitvl8lnw9yTBZKZeU1+IFBvWgN72o4B+Y/qjZJ5N0pCK+ZSrIeLo8Pse/S6\nQIULNIKq3VuvLgliDcsOzIMCAwEAAQ==\n-----END PUBLIC KEY-----\n"
>       }
>     },
>     {
>       "id": "f40e1176-a4ff-36e6-b2ed-c2c2d18097a3",
>       "type": "public_keys",
>       "attributes": {
>         "key": "-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA9L57/eAXG5ILm1CKjDpz\nUqqEOq45OyIGXr4lYPPL090C8ulDHkqd8I4Zn1k0ZVLL1SC/mtWaE4+k5jrrQTQN\n3pFVDraUsI+ugvtyCwH0IViW0UaASkT26BQwdzN9/iGJACoL1pAOzQaEpBW9LtLB\nkgdNYHKZD++RD0gskbkhuaBM5yLx6sK2vES49GhCCog/qGkq9ogZIuXN9UMZpqgv\ntF9sBNLixGNxvsz7svxlaPFKim1eetVgWa53KTuypUJcnNWFJdft4NhmOabHfc4M\n3IyCtkrkkRmmoaYKr3ZK2fCYIRaUxyEv+YWM3ISV1ZkEEqlRtH2dybOotkxkJpOt\n3AKMk86FXrcgMmspf34wN8uFXVrtZht6XkbWWwjlG+I48V1SPM7SK9BrnDQNgoJe\nd5LhjyK4dNTJo+XM2C65iwKDc5OzQX+VS9mS5uSKzn9rDOkpjjMLqWxDdmK4X7uZ\nZMkFtDcuf0vYKuMcOQ4w1NH+FcFO1XPtKftIiLLY0SafUIqGEbt1bf0A/whLpTNE\nrc1WI1V8+DsYhqZqWDINbqNXS1/iRahiXPanmszR6npkxqdvtMsdM5FJJIz7x9a/\noPNqkDzHWZPwpZCdZO4mijx2CIcMqh8Y2NXlMI/FDlO/qUgmFz1gf9Fm41HLmFzS\n5LG5KbxmgbPJlM3Q8s6TAl0CAwEAAQ==\n-----END PUBLIC KEY-----\n"
>       }
>     }
bash: data:: command not found
bash: id:: command not found
bash: type:: command not found
bash: attributes:: command not found
bash: key:: command not found
bash: },: command not found
bash: id:: command not found
bash: type:: command not found
bash: attributes:: command not found
bash: key:: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $   ]
bash: ]: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ }
bash: syntax error near unexpected token `}'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ # Compiled python modules.
tribution folder.
/dist/
/build/

# Python egg metadata, regenerated from source files by setuptools.
/*.egg-info
/*.egg
/.eggs/

# pipenv lockfile
/Pipfile.lock

# coverage
.coverage
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ *.pyc
bash: *.pyc: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ # Setuptools distribution folder.
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ /dist/
bash: /dist/: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ /build/
bash: /build/: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ # Python egg metadata, regenerated from source files by setuptools.
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ /*.egg-info
bash: /*.egg-info: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ /*.egg
bash: /*.egg: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ /.eggs/
bash: /.eggs/: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ # pipenv lockfile
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ /Pipfile.lock
bash: /Pipfile.lock: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ # coverage
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ .coverage
bash: .coverage: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ ignore:
bash: ignore:: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $   - "tests/*”
> [build-system]
> requires =
>     setuptools>=42
>     wheel
> build-backend = "setuptools.build_meta"
> 
> [coverage:run]
> source = .
> omit =
>     tests/*
>     setup.py
>     didww_encrypt/__main__.py
>     examples/*
> 
> [flake8]
> exclude = .git,.idea,__pycache__,.eggs,build,dist,*.egg-info,.github
> max-complexity = 10
> max-line-length = 120
> # DIDWW Encrypt Python 3 SDK
> 
> [![github_actions](https://github.com/didww/didww_encrypt_python/actions/workflows/tests.yml/badge.svg)](https://github.com/didww/didww_encrypt_python/actions)
> [![codecov](https://codecov.io/gh/didww/didww_encrypt_python/branch/main/graph/badge.svg)](https://codecov.io/gh/didww/didww_encrypt_python)
> 
> This is Python 3 module and CLI to encrypt file for DIDWW API 3.
> 
> File encrypted with mode `sandbox` could be uploaded to `POST https://sandbox-api.didww.com/v3/encrypted_files`.
> 
> File encrypted with mode `production` could be uploaded to `POST https://api.didww.com/v3/encrypted_files`.
> 
> see [DIDWW Documentation](https://doc.didww.com) for details.
> 
> ## Requirements
> 
> Python `>=3.6`
> 
> ## Dependencies
> 
> [PyCryptodomex](https://pypi.org/project/pycryptodomex/)
> 
> ## Install
> 
> ```shell
> pip install didww_encrypt
> ```
> 
> ## Usage
> 
> ### Inside python
> ```python
> from didww_encrypt import Encrypt, MODE_PRODUCTION
> 
> 
> with open("doc.pdf", mode="rb") as f:
>     data = f.read()
>     
> enc = Encrypt.new(MODE_PRODUCTION)
> enc_data = enc.encrypt(data)
> enc_filename = "doc.pdf.enc"
> with open(enc_filename, mode="wb") as f:
>     f.write(enc_data)
>     
> print(f"encrypted file saved: {enc_filename}")
> print(f"fingerprint: {enc.fingerprint}")
> ```
> 
> ### Shell
> 
> ```
> usage: didww_encrypt [-h] [-i [INPUT]] [-o [OUTPUT]] [-f] (-m [{sandbox,production}] | -u [URI])
> 
> Encrypt file for DIDWW API 3
> 
> optional arguments:
>   -h, --help            show this help message and exit
>   -i [INPUT], --input [INPUT]
>                         use input pipe when not passed
>   -o [OUTPUT], --output [OUTPUT]
>                         use output pipe when not passed
>   -f, --fingerprint     return fingerprint for public keys
>   -m [{sandbox,production}], --mode [{sandbox,production}]
>                         which DIDWW server use for public keys fetching
>   -u [URI], --uri [URI]
>                         custom URI for public keys fetching
> ```
> 
> You can pass input and output files as params
> ```shell
> $ didww_encrypt -i ./doc.pdf -o ./doc.pdf.enc -m sandbox
> ```
> 
> Or using pipe
> ```shell
> $ cat ./doc.pdf | didww_encrypt -m production > ./doc.pdf.enc
> ```
> 
> Also script could be run via `python -m`
> ```shell
> $ python -m didww_encrypt -i ./doc.pdf -o ./doc.pdf.enc -m production
> $ cat ./doc.pdf | python -m didww_encrypt -m sandbox > ./doc.pdf.enc
> ```
> 
> To print fingerprint use `-f` option instead of `-i`
> ```shell
> $ didww_encrypt -f -m sandbox
> c74684d7863639169c21c4d04747f8d6fa05cfe3:::7c56fd5d2e1f2ada18765d936e74712037aea7eb
> ```
> 
> Or you can save it to a file
> ```shell
> $ didww_encrypt -f -m sandbox -o fingerprint.txt
> ```
> 
> **Keep in mind** that shell script returns fingerprint with newline which should be omitted when send it to `/v3/encrypted_files`.
> 
> ## Additional information
> 
> both shell script and module function `Encrypt.new` respects `http_proxy` env variable when fetching public keys.
> 
> ```shell
> http_proxy="http://myproxy.example.com:1234" didww_encrypt -m sandbox
> ```
> 
> ## Development
> 
> ### Install dependencies
> 
> ```shell
> pip install -r requirements.txt
> pip install -r tests/requirements.txt
> ```
> 
> ### Run tests
> ```shell
> python -m unittest -v
> ```
> 
> ### Run tests with coverage
> ```shell
> coverage run -m unittest -v
> ```
> 
> ### Lint with flake8
> ```shell
> flake8 . --count --show-source --statistics
> ```
> 
> ### Fix code format with Black
> ```shell
> black .
> ```
> """
 file for DIDWW API 3.

File encrypted with mode `sandbox` could be uploaded to `POST https://sandbox-api.didww.com/v3/encrypted_files`.

File encrypted with mode `production` could be uploaded to `POST https://api.didww.com/v3/encrypted_files`.

    .. highlight:: python
    .. code-block:: python

        from didww_encrypt import Encrypt, MODE_PRODUCTION

        with open("doc.pdf", mode="rb") as f:
            data = f.read()

        enc = Encrypt.new(MODE_PRODUCTION)
        enc_data = enc.encrypt(data)
        enc_filename = "doc.pdf.enc"
        with open(enc_filename, mode="wb") as f:
            f.write(enc_data)

        print(f"encrypted file saved: {enc_filename}")
        print(f"fingerprint: {enc.fingerprint}")
"""

MODE_SANDBOX = "sandbox"
MODE_PRODUCTION = "production"
URI_SANDBOX = "https://sandbox-api.didww.com/v3/public_keys"
URI_PRODUCTION = "https://api.didww.com/v3/public_keys"
MODES = [MODE_SANDBOX, MODE_PRODUCTION]
bash: sandbox: command not found
bash: POST: command not found
bash: production: command not found
bash: POST: command not found
bash: shell: command not found
Python 3.10.4 (main, Apr  3 2023, 22:35:52) [GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>   File "<stdin>", line 1
    This is Python 3 module and utility to encrypt file for DIDWW API 3.
                   ^
SyntaxError: invalid syntax
>>> >>>   File "<stdin>", line 1
    File encrypted with mode `sandbox` could be uploaded to `POST https://sandbox-api.didww.com/v3/encrypted_files`.
         ^^^^^^^^^
SyntaxError: invalid syntax
>>> >>>   File "<stdin>", line 1
    File encrypted with mode `production` could be uploaded to `POST https://api.didww.com/v3/encrypted_files`.
         ^^^^^^^^^
SyntaxError: invalid syntax
>>> >>>   File "<stdin>", line 1
    .. highlight:: python
IndentationError: unexpected indent
>>>   File "<stdin>", line 1
    .. code-block:: python
IndentationError: unexpected indent
>>> >>>   File "<stdin>", line 1
    from didww_encrypt import Encrypt, MODE_PRODUCTION
IndentationError: unexpected indent
>>> >>>   File "<stdin>", line 1
    with open("doc.pdf", mode="rb") as f:
IndentationError: unexpected indent
>>>   File "<stdin>", line 1
    data = f.read()
IndentationError: unexpected indent
>>> >>>   File "<stdin>", line 1
    enc = Encrypt.new(MODE_PRODUCTION)
IndentationError: unexpected indent
>>>   File "<stdin>", line 1
    enc_data = enc.encrypt(data)
IndentationError: unexpected indent
>>>   File "<stdin>", line 1
    enc_filename = "doc.pdf.enc"
IndentationError: unexpected indent
>>>   File "<stdin>", line 1
    with open(enc_filename, mode="wb") as f:
IndentationError: unexpected indent
>>>   File "<stdin>", line 1
    f.write(enc_data)
IndentationError: unexpected indent
>>> >>>   File "<stdin>", line 1
    print(f"encrypted file saved: {enc_filename}")
IndentationError: unexpected indent
>>>   File "<stdin>", line 1
    print(f"fingerprint: {enc.fingerprint}")
IndentationError: unexpected indent
>>> ... ... ... ... ... ... ... from .command_line import main

exit(main("python ... ... -m didww_encrypt"))
... """Encrypt file for DIDWW API 3

usage: didww_encr  File "<stdin>", line 11
    """Encrypt file for DIDWW API 3
       ^^^^^^^
SyntaxError: invalid syntax
>>> >>> ypt [-h] [-i [INPUT]] [-o [OUTPUT]] [-f] (-m [{sandbox,production}] | -u [URI])

Encrypt file for DITraceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'didww_encrypt' is not defined
>>> >>> DWW API 3

optional arguments:
  -h, --help         File "<stdin>", line 1
    Encrypt file for DIDWW API 3
            ^^^^
SyntaxError: invalid syntax
>>> >>>   File "<stdin>", line 1
    optional arguments:
             ^^^^^^^^^
SyntaxError: invalid syntax
>>>      show this help message and exit
  -i [INPUT],  File "<stdin>", line 1
    -h, --help            show this help message and exit
IndentationError: unexpected indent
>>>  --input [INPUT]
                        use input  File "<stdin>", line 1
    -i [INPUT], --input [INPUT]
IndentationError: unexpected indent
>>>  pipe when not passed
  -o [OUTPUT], --output [OUT  File "<stdin>", line 1
    use input pipe when not passed
IndentationError: unexpected indent
>>> PUT]
                        use output pipe when   File "<stdin>", line 1
    -o [OUTPUT], --output [OUTPUT]
IndentationError: unexpected indent
>>> not passed
  -f, --fingerprint     return fingerpr  File "<stdin>", line 1
    use output pipe when not passed
IndentationError: unexpected indent
>>> int for public keys
  -m [{sandbox,production}], -  File "<stdin>", line 1
    -f, --fingerprint     return fingerprint for public keys
IndentationError: unexpected indent
>>> -mode [{sandbox,production}]
                       File "<stdin>", line 1
    -m [{sandbox,production}], --mode [{sandbox,production}]
IndentationError: unexpected indent
>>>    which DIDWW server use for public keys fetching
  -u [URI], --uri [URI]
                        c  File "<stdin>", line 1
    which DIDWW server use for public keys fetching
IndentationError: unexpected indent
>>>   File "<stdin>", line 1
    -u [URI], --uri [URI]
IndentationError: unexpected indent
>>> ustom URI for public keys fetching
"""

import os
  File "<stdin>", line 1
    custom URI for public keys fetching
IndentationError: unexpected indent
>>> ... ... ... import sys
import argparse
import io
import urllib... ... ... 
from . import Encrypt, MODES


def main(prog="did... ... ... ... ww_encrypt", args=None):
    parser = argparse.Arg... umentParser(prog=prog, description=__doc__)
    pa... rser.add_argument(
        "-i",
        "--input"... ... ,
        nargs="?",
        dest="input",
       ... ... ...  type=argparse.FileType("rb"),
        help="use i... nput pipe when not passed",
    )
    parser.add_a... ... rgument(
        "-o",
        "--output",
       ... ... ...  nargs="?",
        dest="output",
        type=ar... ... gparse.FileType("wb"),
        help="use output pi... pe when not passed",
        default=sys.stdout.bu... ffer,
    )
    parser.add_argument(
        "-f",... ... ... 
        "--fingerprint",
        action="store_tr... ... ue",
        dest="fingerprint",
        help="ret... ... urn fingerprint for public keys",
        default=... False,
    )
    group = parser.add_mutually_exclu... ... sive_group(required=True)
    group.add_argument(
... ...         "-m",
        "--mode",
        nargs="?",... ... 
        dest="mode",
        type=str,
        ch... ... ... oices=MODES,
        help="which DIDWW server use ... for public keys fetching",
    )
    group.add_arg... ... ument(
        "-u",
        "--uri",
        narg... ... ... s="?",
        dest="uri",
        type=str,
     ... ... ...    help="custom URI for public keys fetching",
   ...  )
    options = parser.parse_args(args)
    # if ... ... no fingerprint option and no input option and stdin connected to pipeline
    # then use stdin as in... put
    if not options.fingerprint and options.inp... ut is None:
        if sys.stdin.isatty():
       ... ...      sys.stderr.write("input file or pipe data must be provided\n")
            return 2
        els... ... e:
            options.input = sys.stdin.buffer

 ... ... ...    try:
        __process_command_line(options)
  ... ...       return 0
    except urllib.error.HTTPError a... s error:
        sys.stderr.write(
            f"f... ... ailed to fetch keys from {error.url}: {error.code} {error.msg}\n"
        )
        return 3

    fi... ... ... ... nally:
        if isinstance(options.input, io.Buf... feredReader):
            options.input.close()
  ... ...       if isinstance(options.output, io.BufferedWriter):
            options.output.close()


def __p... ... ... ... rocess_command_line(options):
    encryptor = Encr... ypt.new(mode=options.mode, uri=options.uri)
    if...  options.fingerprint:
        result = (encryptor.... fingerprint + os.linesep).encode("ascii")
    else... :
        result = encryptor.encrypt(options.input... .read())
    options.output.write(result)
... ... from didww_encrypt.fingerprint import calculate_fingerprint
from didww_encrypt.encryption import enc... rypt
from didww_encrypt.fetching import fetch_publ... ic_keys
from . import MODE_SANDBOX, MODE_PRODUCTIO... N, URI_SANDBOX, URI_PRODUCTION


class DIDWW_Encry... ... ... pt:
    def __init__(self, pubkey_a: str, pubkey_b... : str):
        self.pubkey_a = pubkey_a
        s... ... elf.pubkey_b = pubkey_b
        self.fingerprint =...  calculate_fingerprint(self.pubkey_a, self.pubkey_b)

    def encrypt(self, data_bytes: bytes) -> by... ... tes:
        return encrypt(data_bytes, self.pubke... y_a, self.pubkey_b)


def new(mode: str = None, ur... ... ... i: str = None) -> DIDWW_Encrypt:
    if uri is not...  None:
        pubkey_a, pubkey_b = fetch_public_k... eys(uri)
    elif mode == MODE_SANDBOX:
        pu... ... bkey_a, pubkey_b = fetch_public_keys(URI_SANDBOX)
...     elif mode == MODE_PRODUCTION:
        pubkey_a... , pubkey_b = fetch_public_keys(URI_PRODUCTION)
   ...  else:
        raise ValueError("Valid mode, or ur... i must be provided")

    return DIDWW_Encrypt(pub... ... key_a, pubkey_b)
... from Cryptodome.Cipher import AES, PKCS1_OAEP
from...  Cryptodome.Hash import SHA256
from Cryptodome.Pub... licKey import RSA
from Cryptodome.Random import ge... t_random_bytes
from Cryptodome.Util.Padding import...  pad
from Cryptodome.Signature import pss


def en... ... ... ... crypt_rsa_oaep(data: bytes, pubkey: str) -> bytes:
    key = RSA.import_key(pubkey)
    cipher_rsa =... ...  PKCS1_OAEP.new(
        key=key, hashAlgo=SHA256,...  mgfunc=lambda x, y: pss.MGF1(x, y, SHA256)
    )
... ...     return cipher_rsa.encrypt(data)


def encrypt(... ... ... data: bytes, pubkey_a: str, pubkey_b: str) -> bytes:
    """Encrypt data with public keys

    :para...   File "<stdin>", line 133
    """Encrypt data with public keys
       ^^^^^^^
SyntaxError: invalid syntax
>>> >>> m data: data that you want to encrypt
    :param p  File "<stdin>", line 1
    :param data: data that you want to encrypt
IndentationError: unexpected indent
>>> ubkey_a: first RSA public key
    :param pubkey_b:  File "<stdin>", line 1
    :param pubkey_a: first RSA public key
IndentationError: unexpected indent
>>>   second RSA public key
    :return: encrypted dat  File "<stdin>", line 1
    :param pubkey_b:  second RSA public key
IndentationError: unexpected indent
>>> a
    """
    aes_key = get_random_bytes(32)  # AE  File "<stdin>", line 1
    :return: encrypted data
IndentationError: unexpected indent
>>>   File "<stdin>", line 1
    """
IndentationError: unexpected indent
>>> S 256
    aes_iv = get_random_bytes(AES.block_size  File "<stdin>", line 1
    aes_key = get_random_bytes(32)  # AES 256
IndentationError: unexpected indent
>>> )
    cipher = AES.new(aes_key, AES.MODE_CBC, aes_  File "<stdin>", line 1
    aes_iv = get_random_bytes(AES.block_size)
IndentationError: unexpected indent
>>> iv)
    encrypted_aes = cipher.encrypt(pad(data, A  File "<stdin>", line 1
    cipher = AES.new(aes_key, AES.MODE_CBC, aes_iv)
IndentationError: unexpected indent
>>> ES.block_size))
    aes_key_iv = aes_key + aes_iv
  File "<stdin>", line 1
    encrypted_aes = cipher.encrypt(pad(data, AES.block_size))
IndentationError: unexpected indent
>>>   File "<stdin>", line 1
    aes_key_iv = aes_key + aes_iv
IndentationError: unexpected indent
>>>     encrypted_aes_key_iv_a = encrypt_rsa_oaep(aes_key_iv, pubkey_a)
    encrypted_aes_key_iv_b = enc  File "<stdin>", line 1
    encrypted_aes_key_iv_a = encrypt_rsa_oaep(aes_key_iv, pubkey_a)
IndentationError: unexpected indent
>>> rypt_rsa_oaep(aes_key_iv, pubkey_b)
    return enc  File "<stdin>", line 1
    encrypted_aes_key_iv_b = encrypt_rsa_oaep(aes_key_iv, pubkey_b)
IndentationError: unexpected indent
>>> rypted_aes_key_iv_a + encrypted_aes_key_iv_b + encrypted_aes
  File "<stdin>", line 1
    return encrypted_aes_key_iv_a + encrypted_aes_key_iv_b + encrypted_aes
IndentationError: unexpected indent
>>> from urllib.request import urlopen
import json


def fetch_public_keys(uri: str) -> (str, str):
    response = urlopen(uri)
    payload = json.loads(response.read())
    return (
        payload["data"][0]["attributes"]["key"],
        payload["data"][1]["attributes"]["key"],
    )
>>> >>> >>> >>> ... ... ... ... ... ... ... from base64 import b64decode
from Cryptodome.Hash   File "<stdin>", line 8
    from base64 import b64decode
    ^^^^
SyntaxError: invalid syntax
>>> import SHA1

SEPARATOR = ":::"


def pubkey_pem_to_bin(pubkey: str) -> bytes:
    key = pubkey.replace(r"\r\n", r"\n")
    if key[-1:] != "\n":
        key += "\n"
    pem = "".join(key.split("\n")[1:-2])
    return b64decode(pem.encode("ascii"))


def fingerprint_for(pubkey: bytes) -> str:
    digest = SHA1.new(pubkey)
    return digest.hexdigest()


def calculate_fingerprint(pubkey_a: str, pubkey_b: str) -> str:
    fingerprint_a = fingerprint_for(pubkey_pem_to_bin(pubkey_a))
    fingerprint_b = fingerprint_for(pubkey_pem_to_bin(pubkey_b))
    return "".join([fingerprint_a, SEPARATOR, fingerprint_b])
>>> >>> >>> >>> >>> ... ... ... ... ... ... >>> >>> ... ... ... >>> >>> ... ... ... ... import os
import sys
import requests
from didww_en  File "<stdin>", line 5
    import os
    ^^^^^^
SyntaxError: invalid syntax
>>> >>> crypt import Encrypt, MODE_SANDBOX

file_path = os.environ.get("FILE_PATH")
if file_path is None:
    sys.stderr.write("Please provide FILE_PATH\n")
    exit(1)

with open(file_path, mode="rb") as f:
    data = f.read()

enc = Encrypt.new(MODE_SANDBOX)
enc_data = enc.encrypt(data)

api_key = os.environ.get("DIDWW_API_KEY")
if api_key is None:
    sys.stderr.write("Please provide DIDWW_API_KEY\n")
    exit(1)

response = requests.post(
    "https://sandbox-api.didww.com/v3/encrypted_files",
    headers={"Api-Key": api_key},
    files={"encrypted_files[items][][file]": enc_data},
    data={
        "encrypted_files[encryption_fingerprint]": enc.fingerprint,
        "encrypted_files[items][][description]": "python lib",
    },
)
print(f"Response: {response.status_code} #{response.json()}")
>>> >>> >>> Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'os' is not defined
>>> ... ... ... Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'file_path' is not defined
>>> ... ... Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'file_path' is not defined
>>> >>> Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'data' is not defined
>>> >>> Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'os' is not defined
>>> ... ... ... Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'api_key' is not defined
>>> ... ... ... ... ... ... ... ... Traceback (most recent call last):
  File "<stdin>", line 3, in <module>
NameError: name 'api_key' is not defined
>>> Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'response' is not defined
>>> 