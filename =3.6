@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ # Compiled python modules.
tribution folder.
/dist/
/build/

# Python egg metadata, regenerated from source files by setuptools.
/*.egg-info
/*.egg
/.eggs/

# pipenv lockfile
/P@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ *.pyc
bash: *.pyc: command not found
ipfile.lock

# coverage
.coverage

.fake@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ # Setuptools distribution folder.
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ /dist/
bash: /dist/: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ /build/
bash: /build/: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ # Python egg metadata, regenerated from source files by setuptools.
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ /*.egg-info
bash: /*.egg-info: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ /*.egg
bash: /*.egg: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ /.eggs/
bash: /.eggs/: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ # pipenv lockfile
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ /Pipfile.lock
bash: /Pipfile.lock: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ # coverage
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ .coverage
bash: .coverage: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ .fake
bash: .fake: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ [build-system]
bash: [build-system]: command not found
heel
build-backend = "setuptools.build_meta"

[coverage:run]
source = .
omit =
    tests/*
    setup.py
    didww_encrypt/__main__.py
    examples/*

@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ requires =
[flake8]
exclude = .git,.idea,__pycache__,.eggs,bubash: requires: command not found
ild,dist,*.egg-info,.github
max-complexity = 10
max-line-length = 120
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     setuptools>=42
bash: setuptools: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     wheel
usage: wheel [-h] {unpack,pack,convert,tags,version,help} ...

positional arguments:
  {unpack,pack,convert,tags,version,help}
                        commands
    unpack              Unpack wheel
    pack                Repack wheel
    convert             Convert egg or wininst to wheel
    tags                Add or replace the tags on a wheel
    version             Print version and exit
    help                Show this help

options:
  -h, --help            show this help message and exit
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ build-backend = "setuptools.build_meta"
bash: build-backend: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ [coverage:run]
bash: [coverage:run]: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ source = .
bash: =: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ omit =
bash: omit: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     tests/*
bash: tests/__init__.py: Permission denied
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     setup.py
bash: setup.py: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     didww_encrypt/__main__.py
bash: didww_encrypt/__main__.py: Permission denied
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     examples/*
bash: examples/upload_encrypted_file.py: Permission denied
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ [flake8]
bash: [flake8]: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ exclude = .git,.idea,__pycache__,.eggs,build,dist,*.egg-info,.github
bash: exclude: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ max-complexity = 10
bash: max-complexity: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ max-line-length = 120
bash: max-line-length: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ [build-system]
bash: [build-system]: command not found
heel
build-backend = "setuptools.build_meta"

[coverage:run]
source = .
omit =
    tests/*
    setup.py
    didww_encrypt/__main__.py
    examples/*

[flake8]
exclude = .git,.idea,__pycache__,.eggs,build,dist,*.egg-info,.github
max-complexity = 10
max-line-length = 120
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ requires =
bash: requires: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     setuptools>=42
bash: setuptools: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     wheel
usage: wheel [-h] {unpack,pack,convert,tags,version,help} ...

positional arguments:
  {unpack,pack,convert,tags,version,help}
                        commands
    unpack              Unpack wheel
    pack                Repack wheel
    convert             Convert egg or wininst to wheel
    tags                Add or replace the tags on a wheel
    version             Print version and exit
    help                Show this help

options:
  -h, --help            show this help message and exit
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ build-backend = "setuptools.build_meta"
bash: build-backend: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ [coverage:run]
bash: [coverage:run]: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ source = .
bash: =: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ omit =
bash: omit: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     tests/*
bash: tests/__init__.py: Permission denied
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     setup.py
bash: setup.py: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     didww_encrypt/__main__.py
bash: didww_encrypt/__main__.py: Permission denied
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     examples/*
bash: examples/upload_encrypted_file.py: Permission denied
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ [flake8]
bash: [flake8]: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ exclude = .git,.idea,__pycache__,.eggs,build,dist,*.egg-info,.github
bash: exclude: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ max-complexity = 10
bash: max-complexity: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ max-line-length = 120
bash: max-line-length: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from .command_line import main
-m didww_encrypt"))
from: can't read /var/mail/.command_line
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ exit(main("python -m didww_encrypt"))
bash: syntax error near unexpected token `main'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ """Encrypt file for DIDWW API 3
> 
> usage: didww_encrypt [-h] [-i [INPUT]] [-o [OUTPUT]] [-f] (-m [{sandbox,production}] | -u [URI])
> 
> Encrypt file for DIDWW API 3
> 
> optional arguments:
>   -h, --help            show this help message and exit
>   -i [INPUT], --input [INPUT]
>                         use input pipe when not passed
>   -o [OUTPUT], --output [OUTPUT]
>                         use output pipe when not passed
>   -f, --fingerprint     return fingerprint for public keys
>   -m [{sandbox,production}], --mode [{sandbox,production}]
>                         which DIDWW server use for public keys fetching
>   -u [URI], --uri [URI]
>                         custom URI for public keys fetching
> """
import sys
import argparse
import io
import urllib
from . import Encrypt, MODES


def main(prog="didww_encrypt", args=None):
    parser = argparse.Argbash: $'Encrypt file for DIDWW API 3\n\nusage: didww_encrypt [-h] [-i [INPUT]] [-o [OUTPUT]] [-f] (-m [{sandbox,production}] | -u [URI])\n\nEncrypt file for DIDWW API 3\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i [INPUT], --input [INPUT]\n                        use input pipe when not passed\n  -o [OUTPUT], --output [OUTPUT]\n                        use output pipe when not passed\n  -f, --fingerprint     return fingerprint for public keys\n  -m [{sandbox,production}], --mode [{sandbox,production}]\n                        which DIDWW server use for public keys fetching\n  -u [URI], --uri [URI]\n                        custom URI for public keys fetching\n': command not found
umentParser(prog=prog, description=__doc__)
    parser.add_argument(
        "-i",
        "--input",
        nargs="?",
        dest="input",
        type=argparse.FileType("rb"),
        help="use i@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
nput pipe when not passed",
    )
    parser.add_argument(
        "-o",
        "--output",
        nargs="?",
        dest="output",
        type=argparse.FileType("wb"),
        help="use output pi@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ import os
pe when not passed",
        default=sys.stdout.bubash: import: command not found
ffer,
    )
    parser.add_argument(
        "-f",
        "--fingerprint",
        action="store_true",
        dest="fingerprint",
        help="return fingerprint for public keys",
        default=@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ import sys
bash: import: command not found
False,
    )
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "-m",
        "--mode",
        nargs="?",
        dest="mode",
        type=str,
        ch@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ import argparse
bash: import: command not found
oices=MODES,
        help="which DIDWW server use for public keys fetching",
    )
    group.add_argument(
        "-u",
        "--uri",
        nargs="?",
        dest="uri",
        type=str,
        help="custom URI for public keys fetching",
   @ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ import io
bash: import: command not found
 )
    options = parser.parse_args(args)
    # if no fingerprint option and no input option and stdin connected to pipeline
    # then use stdin as input
    if not options.fingerprint and options.inp@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ import urllib
bash: import: command not found
ut is None:
        if sys.stdin.isatty():
            sys.stderr.write("input file or pipe data must be provided\n")
            return 2
        else:
            options.input = sys.stdin.buffer

    try:
        __process_command_line(options)
  @ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from . import Encrypt, MODES
      return 0
    except urllib.error.HTTPError as error:
        sys.stderr.write(
            f"failed to fetch keys from {error.url}: {error.code} {error.msg}\n"
        )
        return 3

    fi@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
nally:
        if isinstance(options.input, io.BufferedReader):
            options.input.close()
        if isinstance(options.output, io.BufferedWriter):
            options.output.close()


def __p@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
rocess_command_line(options):
    encryptor = Encrypt.new(mode=options.mode, uri=options.uri)
    if options.fingerprint:
        result = (encryptor.fingerprint + os.linesep).encode("ascii")
    else@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ def main(prog="didww_encrypt", args=None):
bash: syntax error near unexpected token `('
:
        result = encryptor.encrypt(options.input.read())
    options.output.write(result)
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     parser = argparse.ArgumentParser(prog=prog, description=__doc__)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     parser.add_argument(
bash: syntax error near unexpected token `newline'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         "-i",
bash: -i,: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         "--input",
bash: --input,: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         nargs="?",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         dest="input",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         type=argparse.FileType("rb"),
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         help="use input pipe when not passed",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     )
bash: syntax error near unexpected token `)'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     parser.add_argument(
bash: syntax error near unexpected token `newline'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         "-o",
bash: -o,: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         "--output",
bash: --output,: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         nargs="?",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         dest="output",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         type=argparse.FileType("wb"),
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         help="use output pipe when not passed",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         default=sys.stdout.buffer,
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     )
bash: syntax error near unexpected token `)'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     parser.add_argument(
bash: syntax error near unexpected token `newline'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         "-f",
bash: -f,: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         "--fingerprint",
bash: --fingerprint,: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         action="store_true",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         dest="fingerprint",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         help="return fingerprint for public keys",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         default=False,
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     )
bash: syntax error near unexpected token `)'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     group = parser.add_mutually_exclusive_group(required=True)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     group.add_argument(
bash: syntax error near unexpected token `newline'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         "-m",
bash: -m,: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         "--mode",
bash: --mode,: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         nargs="?",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         dest="mode",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         type=str,
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         choices=MODES,
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         help="which DIDWW server use for public keys fetching",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     )
bash: syntax error near unexpected token `)'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     group.add_argument(
bash: syntax error near unexpected token `newline'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         "-u",
bash: -u,: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         "--uri",
bash: --uri,: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         nargs="?",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         dest="uri",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         type=str,
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         help="custom URI for public keys fetching",
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     )
bash: syntax error near unexpected token `)'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     options = parser.parse_args(args)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     # if no fingerprint option and no input option and stdin connected to pipeline
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     # then use stdin as input
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     if not options.fingerprint and options.input is None:
>         if sys.stdin.isatty():
bash: syntax error near unexpected token `:'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $             sys.stderr.write("input file or pipe data must be provided\n")
bash: syntax error near unexpected token `"input file or pipe data must be provided\n"'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $             return 2
bash: return: can only `return' from a function or sourced script
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         else:
bash: else:: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $             options.input = sys.stdin.buffer
bash: options.input: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     try:
bash: try:: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         __process_command_line(options)
bash: syntax error near unexpected token `options'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         return 0
bash: return: can only `return' from a function or sourced script
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     except urllib.error.HTTPError as error:
bash: except: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         sys.stderr.write(
bash: syntax error near unexpected token `newline'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $             f"failed to fetch keys from {error.url}: {error.code} {error.msg}\n"
bash: ffailed to fetch keys from {error.url}: {error.code} {error.msg}\n: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         )
bash: syntax error near unexpected token `)'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         return 3
bash: return: can only `return' from a function or sourced script
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     finally:
bash: finally:: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         if isinstance(options.input, io.BufferedReader):
bash: syntax error near unexpected token `options.input,'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $             options.input.close()
>         if isinstance(options.output, io.BufferedWriter):
bash: syntax error near unexpected token `options.output,'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $             options.output.close()
> 
> 
> def __process_command_line(options):
bash: syntax error near unexpected token `def'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     encryptor = Encrypt.new(mode=options.mode, uri=options.uri)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     if options.fingerprint:
>         result = (encryptor.fingerprint + os.linesep).encode("ascii")
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     else:
bash: else:: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         result = encryptor.encrypt(options.input.read())
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     options.output.write(result)
bash: syntax error near unexpected token `result'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from didww_encrypt.fingerprint import calculate_fingerprint
from: can't read /var/mail/didww_encrypt.fingerprint
rypt
from didww_encrypt.fetching import fetch_public_keys
from . import MODE_SANDBOX, MODE_PRODUCTION, URI_SANDBOX, URI_PRODUCTION


class DIDWW_Encrypt:
    def __init__(self, pubkey_a: str, pubkey_b@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from didww_encrypt.encryption import encrypt
: str):
        self.pubkey_a = pubkey_a
        sfrom: can't read /var/mail/didww_encrypt.encryption
elf.pubkey_b = pubkey_b
        self.fingerprint = calculate_fingerprint(self.pubkey_a, self.pubkey_b)

    def encrypt(self, data_bytes: bytes) -> by@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from didww_encrypt.fetching import fetch_public_keys
tes:
        return encrypt(data_bytes, self.pubkefrom: can't read /var/mail/didww_encrypt.fetching
y_a, self.pubkey_b)


def new(mode: str = None, uri: str = None) -> DIDWW_Encrypt:
    if uri is not None:
        pubkey_a, pubkey_b = fetch_public_keys(uri)
    elif mode == MODE_SANDBOX:
        pu@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from . import MODE_SANDBOX, MODE_PRODUCTION, URI_SANDBOX, URI_PRODUCTION
bkey_a, pubkey_b = fetch_public_keys(URI_SANDBOX)
    elif mode == MODE_PRODUCTION:
        pubkey_a, pubkey_b = fetch_public_keys(URI_PRODUCTION)
    else:
        raise ValueError("Valid mode, or ur@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
i must be provided")

    return DIDWW_Encrypt(pubkey_a, pubkey_b)
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ class DIDWW_Encrypt:
bash: class: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     def __init__(self, pubkey_a: str, pubkey_b: str):
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         self.pubkey_a = pubkey_a
bash: self.pubkey_a: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         self.pubkey_b = pubkey_b
bash: self.pubkey_b: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         self.fingerprint = calculate_fingerprint(self.pubkey_a, self.pubkey_b)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     def encrypt(self, data_bytes: bytes) -> bytes:
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         return encrypt(data_bytes, self.pubkey_a, self.pubkey_b)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ def new(mode: str = None, uri: str = None) -> DIDWW_Encrypt:
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     if uri is not None:
>         pubkey_a, pubkey_b = fetch_public_keys(uri)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     elif mode == MODE_SANDBOX:
bash: syntax error near unexpected token `elif'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         pubkey_a, pubkey_b = fetch_public_keys(URI_SANDBOX)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     elif mode == MODE_PRODUCTION:
bash: syntax error near unexpected token `elif'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         pubkey_a, pubkey_b = fetch_public_keys(URI_PRODUCTION)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     else:
bash: else:: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         raise ValueError("Valid mode, or uri must be provided")
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     return DIDWW_Encrypt(pubkey_a, pubkey_b)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from Cryptodome.Cipher import AES, PKCS1_OAEP
from: can't read /var/mail/Cryptodome.Cipher Cryptodome.Hash import SHA256
from Cryptodome.Pub
licKey import RSA
from Cryptodome.Random import get_random_bytes
from Cryptodome.Util.Padding import pad
from Cryptodome.Signature import pss


def en@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from Cryptodome.Hash import SHA256
crypt_rsa_oaep(data: bytes, pubkey: str) -> bytes:from: can't read /var/mail/Cryptodome.Hash

    key = RSA.import_key(pubkey)
    cipher_rsa = PKCS1_OAEP.new(
        key=key, hashAlgo=SHA256, mgfunc=lambda x, y: pss.MGF1(x, y, SHA256)
    )
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from Cryptodome.PublicKey import RSA
    return cipher_rsa.encrypt(data)


def encrypt(from: can't read /var/mail/Cryptodome.PublicKey
data: bytes, pubkey_a: str, pubkey_b: str) -> bytes:
    """Encrypt data with public keys

    :param data: data that you want to encrypt
    :param pubkey_a: first RSA public key
    :param pubkey_b:@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from Cryptodome.Random import get_random_bytes
  second RSA public key
    :return: encrypted datfrom: can't read /var/mail/Cryptodome.Random
a
    """
    aes_key = get_random_bytes(32)  # AES 256
    aes_iv = get_random_bytes(AES.block_size)
    cipher = AES.new(aes_key, AES.MODE_CBC, aes_@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from Cryptodome.Util.Padding import pad
ES.block_size))
    aes_key_iv = aes_key + aes_iv
from: can't read /var/mail/Cryptodome.Util.Padding
    encrypted_aes_key_iv_a = encrypt_rsa_oaep(aes_key_iv, pubkey_a)
    encrypted_aes_key_iv_b = encrypt_rsa_oaep(aes_key_iv, pubkey_b)
    return enc@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from Cryptodome.Signature import pss
rypted_aes_key_iv_a + encrypted_aes_key_iv_b + encfrom: can't read /var/mail/Cryptodome.Signature
rypted_aes
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ def encrypt_rsa_oaep(data: bytes, pubkey: str) -> bytes:
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     key = RSA.import_key(pubkey)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     cipher_rsa = PKCS1_OAEP.new(
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         key=key, hashAlgo=SHA256, mgfunc=lambda x, y: pss.MGF1(x, y, SHA256)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     )
bash: syntax error near unexpected token `)'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     return cipher_rsa.encrypt(data)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ def encrypt(data: bytes, pubkey_a: str, pubkey_b: str) -> bytes:
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     """Encrypt data with public keys
> 
>     :param data: data that you want to encrypt
>     :param pubkey_a: first RSA public key
>     :param pubkey_b:  second RSA public key
>     :return: encrypted data
>     """
bash: $'Encrypt data with public keys\n\n    :param data: data that you want to encrypt\n    :param pubkey_a: first RSA public key\n    :param pubkey_b:  second RSA public key\n    :return: encrypted data\n    ': command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     aes_key = get_random_bytes(32)  # AES 256
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     aes_iv = get_random_bytes(AES.block_size)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     cipher = AES.new(aes_key, AES.MODE_CBC, aes_iv)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     encrypted_aes = cipher.encrypt(pad(data, AES.block_size))
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     aes_key_iv = aes_key + aes_iv
bash: aes_key_iv: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     encrypted_aes_key_iv_a = encrypt_rsa_oaep(aes_key_iv, pubkey_a)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     encrypted_aes_key_iv_b = encrypt_rsa_oaep(aes_key_iv, pubkey_b)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     return encrypted_aes_key_iv_a + encrypted_aes_key_iv_b + encrypted_aes
bash: return: encrypted_aes_key_iv_a: numeric argument required
bash: return: can only `return' from a function or sourced script
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from Cryptodome.Cipher import AES, PKCS1_OAEP
from: can't read /var/mail/Cryptodome.Cipher
 Cryptodome.Hash import SHA256
from Cryptodome.PublicKey import RSA
from Cryptodome.Random import get_random_bytes
from Cryptodome.Util.Padding import pad
from Cryptodome.Signature import pss


def en@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from Cryptodome.Hash import SHA256
crypt_rsa_oaep(data: bytes, pubkey: str) -> bytes:from: can't read /var/mail/Cryptodome.Hash

    key = RSA.import_key(pubkey)
    cipher_rsa = PKCS1_OAEP.new(
        key=key, hashAlgo=SHA256, mgfunc=lambda x, y: pss.MGF1(x, y, SHA256)
    )
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from Cryptodome.PublicKey import RSA
    return cipher_rsa.encrypt(data)


def encrypt(from: can't read /var/mail/Cryptodome.PublicKey
data: bytes, pubkey_a: str, pubkey_b: str) -> bytes:
    """Encrypt data with public keys

    :param data: data that you want to encrypt
    :param p@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from Cryptodome.Random import get_random_bytes
ubkey_a: first RSA public key
    :param pubkey_b:from: can't read /var/mail/Cryptodome.Random
  second RSA public key
    :return: encrypted data
    """
    aes_key = get_random_bytes(32)  # AES 256
    aes_iv = get_random_bytes(AES.block_size@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from Cryptodome.Util.Padding import pad
)
    cipher = AES.new(aes_key, AES.MODE_CBC, aes_from: can't read /var/mail/Cryptodome.Util.Padding
iv)
    encrypted_aes = cipher.encrypt(pad(data, AES.block_size))
    aes_key_iv = aes_key + aes_iv
    encrypted_aes_key_iv_a = encrypt_rsa_oaep(aes_key_iv, pubkey_a)
    encrypted_aes_key_iv_b = encrypt_rsa_oaep(aes_key_iv, pubkey_b)
    return encrypted_aes_key_iv_a + encrypted_aes_key_iv_b + enc@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from Cryptodome.Signature import pss
rypted_aes
from: can't read /var/mail/Cryptodome.Signature
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ def encrypt_rsa_oaep(data: bytes, pubkey: str) -> bytes:
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     key = RSA.import_key(pubkey)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     cipher_rsa = PKCS1_OAEP.new(
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         key=key, hashAlgo=SHA256, mgfunc=lambda x, y: pss.MGF1(x, y, SHA256)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     )
bash: syntax error near unexpected token `)'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     return cipher_rsa.encrypt(data)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ def encrypt(data: bytes, pubkey_a: str, pubkey_b: str) -> bytes:
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     """Encrypt data with public keys
> 
>     :param data: data that you want to encrypt
>     :param pubkey_a: first RSA public key
>     :param pubkey_b:  second RSA public key
>     :return: encrypted data
>     """
bash: $'Encrypt data with public keys\n\n    :param data: data that you want to encrypt\n    :param pubkey_a: first RSA public key\n    :param pubkey_b:  second RSA public key\n    :return: encrypted data\n    ': command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     aes_key = get_random_bytes(32)  # AES 256
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     aes_iv = get_random_bytes(AES.block_size)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     cipher = AES.new(aes_key, AES.MODE_CBC, aes_iv)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     encrypted_aes = cipher.encrypt(pad(data, AES.block_size))
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     aes_key_iv = aes_key + aes_iv
bash: aes_key_iv: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     encrypted_aes_key_iv_a = encrypt_rsa_oaep(aes_key_iv, pubkey_a)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     encrypted_aes_key_iv_b = encrypt_rsa_oaep(aes_key_iv, pubkey_b)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     return encrypted_aes_key_iv_a + encrypted_aes_key_iv_b + encrypted_aes
bash: return: encrypted_aes_key_iv_a: numeric argument required
bash: return: can only `return' from a function or sourced script
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from base64 import b64decode
from: import SHA1

SEPARATOR = ":::"


def pubkey_pem_tocan't read /var/mail/base64
_bin(pubkey: str) -> bytes:
    key = pubkey.replace(r"\r\n", r"\n")
    if key[-1:] != "\n":
        key += "\n"
    pem = "".join(key.split("\n")[1:@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from Cryptodome.Hash import SHA1
-2])
    return b64decode(pem.encode("ascii"))


dfrom: can't read /var/mail/Cryptodome.Hash
ef fingerprint_for(pubkey: bytes) -> str:
    digest = SHA1.new(pubkey)
    return digest.hexdigest()


def calculate_fingerprint(pubkey_a: str, pubke@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
y_b: str) -> str:
    fingerprint_a = fingerprint_for(pubkey_pem_to_bin(pubkey_a))
    fingerprint_b = fingerprint_for(pubkey_pem_to_bin(pubkey_b))
    return "".join([fingerprint_a, SEPARATOR, finger@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ SEPARATOR = ":::"
bash: SEPARATOR: command not found
print_b])
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ def pubkey_pem_to_bin(pubkey: str) -> bytes:
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     key = pubkey.replace(r"\r\n", r"\n")
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     if key[-1:] != "\n":
>         key += "\n"
>     pem = "".join(key.split("\n")[1:-2])
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     return b64decode(pem.encode("ascii"))
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ def fingerprint_for(pubkey: bytes) -> str:
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     digest = SHA1.new(pubkey)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     return digest.hexdigest()
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ def calculate_fingerprint(pubkey_a: str, pubkey_b: str) -> str:
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     fingerprint_a = fingerprint_for(pubkey_pem_to_bin(pubkey_a))
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     fingerprint_b = fingerprint_for(pubkey_pem_to_bin(pubkey_b))
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     return "".join([fingerprint_a, SEPARATOR, fingerprint_b])
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ import os
crypt import Encrypt, MODE_SANDBOX

file_path = osbash: import: command not found
.environ.get("FILE_PATH")
if file_path is None:
    sys.stderr.write("Please provide FILE_PATH\n")
    exit(1)

with open(file_path, mode="rb") as f:
    data = f.read()

enc = Encrypt.new(MODE_SANDBOX)
enc_data = enc.encrypt(data)

api_key = os.environ.get("DIDWW_API_KEY")
if api_key is None:
    sys.stderr.write("Please provide DIDWW_API_KEY\n")
    exit(1)

response = requests.post(
    "https://sandbox-api.didww.com/v3/encrypted_files",
    headers={"Api-Key": api_key},
    files={"encrypted_files[items][][file]": enc_data},
    data={
        "encrypted_files[encryption_fingerprint]": enc.fingerprint,
        "encrypted_files[items][][description]": "python lib",
    },
)
print(f"Response: {response.status_code} #{response.json()}")
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ import sys
bash: import: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ import requests
bash: import: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ from didww_encrypt import Encrypt, MODE_SANDBOX
from: can't read /var/mail/didww_encrypt
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ file_path = os.environ.get("FILE_PATH")
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ if file_path is None:
>     sys.stderr.write("Please provide FILE_PATH\n")
bash: syntax error near unexpected token `"Please provide FILE_PATH\n"'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     exit(1)
bash: syntax error near unexpected token `1'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ with open(file_path, mode="rb") as f:
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     data = f.read()
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ enc = Encrypt.new(MODE_SANDBOX)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ enc_data = enc.encrypt(data)
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ api_key = os.environ.get("DIDWW_API_KEY")
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ if api_key is None:
>     sys.stderr.write("Please provide DIDWW_API_KEY\n")
bash: syntax error near unexpected token `"Please provide DIDWW_API_KEY\n"'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     exit(1)
bash: syntax error near unexpected token `1'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ response = requests.post(
bash: syntax error near unexpected token `('
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     "https://sandbox-api.didww.com/v3/encrypted_files",
bash: https://sandbox-api.didww.com/v3/encrypted_files,: No such file or directory
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     headers={"Api-Key": api_key},
bash: api_key},: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     files={"encrypted_files[items][][file]": enc_data},
bash: enc_data},: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     data={
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         "encrypted_files[encryption_fingerprint]": enc.fingerprint,
bash: encrypted_files[encryption_fingerprint]:: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $         "encrypted_files[items][][description]": "python lib",
bash: encrypted_files[items][][description]:: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $     },
bash: },: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ )
bash: syntax error near unexpected token `)'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ print(f"Response: {response.status_code} #{response.json()}")
bash: syntax error near unexpected token `f"Response: {response.status_code} #{response.json()}"'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ {
>   "private_key_a": "-----BEGIN RSA PRIVATE KEY-----\n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\n-----END RSA PRIVATE KEY-----\n",
>   "private_key_b": "-----BEGIN RSA PRIVATE KEY-----\n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\n-----END RSA PRIVATE KEY-----\n"
> }
bash: private_key_a:: command not found
bash: private_key_b:: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ {
>   "data": [
>     {
>       "id": "dcf2bfcb-a1d0-3b58-bbf0-3ec22a510ba8",
>       "type": "public_keys",
>       "attributes": {
>         "key": "-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA0eHGTVjy2s+uOfFteMoB\nT6TXa0Ra20weFoA/dQB2SsCvZ2zAOJqDuqbjFPdcRPp0TwR0rmDDHaLzV/d8EwF2\nXiX9+9lwEGivn4PCz0A49gelNthD2dFR/TxyiVVdRsiaPeGJKVZTkYO3FhCKBpXe\nL2h1t+yhIQGGYZjh/fGgahJf2PKzDapHO4p8MZK8KCUBIN5z20cYblRyt39gdHul\nsqGvERDUwYdgiEAFv5Y9yyVFUeMmeiswImLj8yHnVdwc2+5jEtWEeGzkZ0LNQCby\nnynlGwzkDXcQ98Pm00XDcvPwPk91dBvZvhA/G2n2zXp8WA+MLOkWIi015Lqy4doa\n807DYfJW+600c1P0YaOI/pgGO9dGllpFGcZBxoNN5ZMUUOjTmrXYUNYTGSZh93gd\nlGP3rlhvAlui17CUW2pLpl4CaSUDJWXQZyJH/ILZ+HMVgOMsc7eyZDLWyWWaNlJg\nEKSVNF3A8zx8oCtu+LjNPTqaiRvc3BI/ISRvb6r99v5oozCVQ/QIT24AxMLdmy01\nxOhXuDq48uoUTWssquuOnfFdF1WaK3c+AlaomX39re/rj4pvIB0ZlzuVN+LGG5WK\nYb6jCitvl8lnw9yTBZKZeU1+IFBvWgN72o4B+Y/qjZJ5N0pCK+ZSrIeLo8Pse/S6\nQIULNIKq3VuvLgliDcsOzIMCAwEAAQ==\n-----END PUBLIC KEY-----\n"
>       }
>     },
>     {
>       "id": "f40e1176-a4ff-36e6-b2ed-c2c2d18097a3",
>       "type": "public_keys",
>       "attributes": {
>         "key": "-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA9L57/eAXG5ILm1CKjDpz\nUqqEOq45OyIGXr4lYPPL090C8ulDHkqd8I4Zn1k0ZVLL1SC/mtWaE4+k5jrrQTQN\n3pFVDraUsI+ugvtyCwH0IViW0UaASkT26BQwdzN9/iGJACoL1pAOzQaEpBW9LtLB\nkgdNYHKZD++RD0gskbkhuaBM5yLx6sK2vES49GhCCog/qGkq9ogZIuXN9UMZpqgv\ntF9sBNLixGNxvsz7svxlaPFKim1eetVgWa53KTuypUJcnNWFJdft4NhmOabHfc4M\n3IyCtkrkkRmmoaYKr3ZK2fCYIRaUxyEv+YWM3ISV1ZkEEqlRtH2dybOotkxkJpOt\n3AKMk86FXrcgMmspf34wN8uFXVrtZht6XkbWWwjlG+I48V1SPM7SK9BrnDQNgoJe\nd5LhjyK4dNTJo+XM2C65iwKDc5OzQX+VS9mS5uSKzn9rDOkpjjMLqWxDdmK4X7uZ\nZMkFtDcuf0vYKuMcOQ4w1NH+FcFO1XPtKftIiLLY0SafUIqGEbt1bf0A/whLpTNE\nrc1WI1V8+DsYhqZqWDINbqNXS1/iRahiXPanmszR6npkxqdvtMsdM5FJJIz7x9a/\noPNqkDzHWZPwpZCdZO4mijx2CIcMqh8Y2NXlMI/FDlO/qUgmFz1gf9Fm41HLmFzS\n5LG5KbxmgbPJlM3Q8s6TAl0CAwEAAQ==\n-----END PUBLIC KEY-----\n"
>       }
>     }
bash: data:: command not found
bash: id:: command not found
bash: type:: command not found
bash: attributes:: command not found
bash: key:: command not found
bash: },: command not found
bash: id:: command not found
bash: type:: command not found
bash: attributes:: command not found
bash: key:: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $   ]
bash: ]: command not found
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ }
bash: syntax error near unexpected token `}'
@ellipsis52 ➜ /workspaces/didww_encrypt_python (main) $ 